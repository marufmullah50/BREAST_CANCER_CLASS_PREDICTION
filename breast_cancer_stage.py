# -*- coding: utf-8 -*-
"""Breast_cancer_stage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XRXt6JVx1-75Mzcd-DhvqEfUN1hE4eaF

#BREAST CANCER STAGE**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

dataset = pd.read_csv('breast_cancer.csv')
x = dataset.iloc[:,1:-1].values
y = dataset.iloc[:,-1].values

print(x)

print(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

print(x_train)

print(y_train)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)
classifier.fit(x_train,y_train)

"""#**Predicting test set**"""

y_test_pred = classifier.predict(x_test)
print(np.concatenate((y_test_pred.reshape(len(y_test_pred),1),y_test.reshape(len(y_test),1)),1))
# [[predict test, Real]]

"""#**Confusion matrix and accuracy test**"""

from sklearn.metrics import confusion_matrix,accuracy_score
cm = confusion_matrix(y_test,y_test_pred)
print(cm)
model_accuracy = accuracy_score(y_test,y_test_pred) * 100
print(model_accuracy,'%')

"""#**Compute the accuracy with K-Fold Cross validation**"""

from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator=classifier,X=x_train,y=y_train,cv=10)
print("Accuracy : {:.2f} %".format(accuracies.mean()*100))
print("Standard Deviation : {:.2f} %".format(accuracies.std()*100))

"""#**User defined give the condition of the patient and get what stage is he/she in**"""

x1=float(input("Enter the Clump Thickness :"))
x2=float(input("Enter the Uniformity of Cell Size :"))
x3=float(input("Enter the Uniformity of Cell Shape :"))
x4=float(input("Enter the Marginal Adhesion :"))
x5=float(input("Enter the Single Epithelial Cell Size :"))
x6=float(input("Enter the Bare Nuclei :"))
x7=float(input("Enter the Bland Chromatin :"))
x8=float(input("Enter the Normal Nucleoli :"))
x9=float(input("Enter the Mitoses :"))

y_pred = classifier.predict([[x1,x2,x3,x4,x5,x6,x7,x8,x9]])

print(y_pred)